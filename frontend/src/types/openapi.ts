/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/auth/login": {
    /** Auth:Jwt.Login */
    post: operations["auth_jwt_login_auth_login_post"];
  };
  "/auth/logout": {
    /** Auth:Jwt.Logout */
    post: operations["auth_jwt_logout_auth_logout_post"];
  };
  "/auth/register": {
    /**
     * Register 
     * @description 注册时不能指定setting，使用默认setting
     */
    post: operations["register_auth_register_post"];
  };
  "/user": {
    /** Get All Users */
    get: operations["get_all_users_user_get"];
  };
  "/user/me": {
    /** Get Me */
    get: operations["get_me_user_me_get"];
    /** Update Me */
    patch: operations["update_me_user_me_patch"];
  };
  "/user/{user_id}": {
    /** Admin Get User */
    get: operations["admin_get_user_user__user_id__get"];
    /** Admin Delete User */
    delete: operations["admin_delete_user_user__user_id__delete"];
    /** Admin Update User */
    patch: operations["admin_update_user_user__user_id__patch"];
  };
  "/user/{user_id}/setting": {
    /** Admin Update User Setting */
    patch: operations["admin_update_user_setting_user__user_id__setting_patch"];
  };
  "/conv": {
    /**
     * Get My Conversations 
     * @description 返回自己的有效会话
     */
    get: operations["get_my_conversations_conv_get"];
    /** Delete All Conversation */
    delete: operations["delete_all_conversation_conv_delete"];
  };
  "/conv/all": {
    /** Get All Conversations */
    get: operations["get_all_conversations_conv_all_get"];
  };
  "/conv/{conversation_id}": {
    /** Get Conversation History */
    get: operations["get_conversation_history_conv__conversation_id__get"];
    /**
     * Delete Conversation 
     * @description 软删除：标记为 invalid 并且从 chatgpt 账号中删除会话，但不会删除 mongodb 中的历史记录
     */
    delete: operations["delete_conversation_conv__conversation_id__delete"];
    /** Update Conversation Title */
    patch: operations["update_conversation_title_conv__conversation_id__patch"];
  };
  "/conv/{conversation_id}/cache": {
    /** Get Conversation History From Cache */
    get: operations["get_conversation_history_from_cache_conv__conversation_id__cache_get"];
  };
  "/conv/{conversation_id}/vanish": {
    /**
     * Vanish Conversation 
     * @description 硬删除：删除数据库和账号中的对话和历史记录
     */
    delete: operations["vanish_conversation_conv__conversation_id__vanish_delete"];
  };
  "/conv/{conversation_id}/assign/{username}": {
    /** Assign Conversation */
    patch: operations["assign_conversation_conv__conversation_id__assign__username__patch"];
  };
  "/conv/{conversation_id}/gen_title": {
    /** Generate Conversation Title */
    patch: operations["generate_conversation_title_conv__conversation_id__gen_title_patch"];
  };
  "/chat/openai-plugins/all": {
    /** Get All Openai Web Chat Plugins */
    get: operations["get_all_openai_web_chat_plugins_chat_openai_plugins_all_get"];
  };
  "/chat/openai-plugins/installed": {
    /** Get Installed Openai Web Chat Plugins */
    get: operations["get_installed_openai_web_chat_plugins_chat_openai_plugins_installed_get"];
  };
  "/chat/openai-plugin/{plugin_id}": {
    /** Get Openai Web Plugin */
    get: operations["get_openai_web_plugin_chat_openai_plugin__plugin_id__get"];
  };
  "/chat/openai-plugin/{plugin_id}/user-settings": {
    /** Update Chat Plugin User Settings */
    patch: operations["update_chat_plugin_user_settings_chat_openai_plugin__plugin_id__user_settings_patch"];
  };
  "/chat/__schema_types": {
    /**
     * Predict Schema Types 
     * @description 只用来让 openapi 自动生成 schema，并不实际调用
     */
    get: operations["_predict_schema_types_chat___schema_types_get"];
  };
  "/system/info": {
    /** Get System Info */
    get: operations["get_system_info_system_info_get"];
  };
  "/system/stats/request": {
    /** Get Request Statistics */
    get: operations["get_request_statistics_system_stats_request_get"];
  };
  "/system/stats/ask": {
    /** Get Ask Statistics */
    get: operations["get_ask_statistics_system_stats_ask_get"];
  };
  "/system/logs/server": {
    /** Get Server Logs */
    post: operations["get_server_logs_system_logs_server_post"];
  };
  "/system/config": {
    /** Get Config */
    get: operations["get_config_system_config_get"];
    /** Update Config */
    put: operations["update_config_system_config_put"];
  };
  "/system/credentials": {
    /** Get Credentials */
    get: operations["get_credentials_system_credentials_get"];
    /** Update Credentials */
    put: operations["update_credentials_system_credentials_put"];
  };
  "/system/import-users": {
    /**
     * Import Users 
     * @description 解析csv文件，导入用户
     * csv字段：
     */
    post: operations["import_users_system_import_users_post"];
  };
  "/status/common": {
    /**
     * Get Server Status 
     * @description 普通用户获取服务器状态
     */
    get: operations["get_server_status_status_common_get"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** AskLogAggregation */
    AskLogAggregation: {
      _id?: components["schemas"]["AskLogAggregationID"];
      /** Count */
      count: number;
      /** User Ids */
      user_ids?: (number)[];
      /** Total Queueing Time */
      total_queueing_time?: number;
      /** Total Ask Time */
      total_ask_time?: number;
    };
    /** AskLogAggregationID */
    AskLogAggregationID: {
      /**
       * Start Time 
       * Format: date-time
       */
      start_time: string;
      /** Meta */
      meta?: components["schemas"]["OpenaiWebAskLogMeta"] | components["schemas"]["OpenaiApiAskLogMeta"];
    };
    /** AskRequest */
    AskRequest: {
      source: components["schemas"]["ChatSourceTypes"];
      /** Model */
      model: string;
      /** New Conversation */
      new_conversation: boolean;
      /** New Title */
      new_title?: string;
      /**
       * Conversation Id 
       * Format: uuid
       */
      conversation_id?: string;
      /**
       * Parent 
       * Format: uuid
       */
      parent?: string;
      /**
       * Api Context Message Count 
       * @default -1
       */
      api_context_message_count?: number;
      /** Content */
      content: string;
      /** Openai Web Plugin Ids */
      openai_web_plugin_ids?: (string)[];
    };
    /** AskResponse */
    AskResponse: {
      type: components["schemas"]["AskResponseType"];
      /** Tip */
      tip?: string;
      /**
       * Conversation Id 
       * Format: uuid
       */
      conversation_id?: string;
      /** Message */
      message?: components["schemas"]["OpenaiWebChatMessage"] | components["schemas"]["OpenaiApiChatMessage"];
      /** Error Detail */
      error_detail?: string;
    };
    /**
     * AskResponseType 
     * @description An enumeration. 
     * @enum {string}
     */
    AskResponseType: "waiting" | "queueing" | "message" | "error";
    /** AuthSetting */
    AuthSetting: {
      /**
       * Jwt Secret 
       * @default MODIFY_THIS_TO_RANDOM_SECRET
       */
      jwt_secret?: string;
      /**
       * Jwt Lifetime Seconds 
       * @default 86400
       */
      jwt_lifetime_seconds?: number;
      /**
       * Cookie Max Age 
       * @default 86400
       */
      cookie_max_age?: number;
      /**
       * Cookie Name 
       * @default user_auth
       */
      cookie_name?: string;
      /**
       * User Secret 
       * @default MODIFY_THIS_TO_RANDOM_SECRET
       */
      user_secret?: string;
    };
    /** BaseChatMessage */
    BaseChatMessage: {
      /**
       * Id 
       * Format: uuid
       */
      id: string;
      /**
       * Source 
       * @enum {string}
       */
      source: "openai_web" | "openai_api";
      /** Role */
      role: ("system" | "user" | "assistant" | "tool") | string;
      /** Author Name */
      author_name?: "browser" | string;
      /** Model */
      model?: string;
      /**
       * Create Time 
       * Format: date-time
       */
      create_time?: string;
      /**
       * Parent 
       * Format: uuid
       */
      parent?: string;
      /** Children */
      children: (string)[];
      /** Content */
      content?: (components["schemas"]["OpenaiWebChatMessageTextContent"] | components["schemas"]["OpenaiWebChatMessageCodeContent"] | components["schemas"]["OpenaiWebChatMessageStderrContent"] | components["schemas"]["OpenaiWebChatMessageTetherBrowsingDisplayContent"] | components["schemas"]["OpenaiWebChatMessageTetherQuoteContent"] | components["schemas"]["OpenaiWebChatMessageSystemErrorContent"]) | components["schemas"]["OpenaiApiChatMessageTextContent"] | string;
      /** Metadata */
      metadata?: components["schemas"]["OpenaiWebChatMessageMetadata"] | components["schemas"]["OpenaiApiChatMessageMetadata"];
    };
    /** BaseConversationHistory */
    BaseConversationHistory: {
      /**
       * Id 
       * Format: uuid
       */
      _id?: string;
      /**
       * Source 
       * @enum {string}
       */
      source: "openai_web" | "openai_api";
      /** Title */
      title: string;
      /**
       * Create Time 
       * Format: date-time
       */
      create_time: string;
      /**
       * Update Time 
       * Format: date-time
       */
      update_time: string;
      /** Mapping */
      mapping: {
        [key: string]: components["schemas"]["BaseChatMessage"] | undefined;
      };
      /**
       * Current Node 
       * Format: uuid
       */
      current_node?: string;
      /** Current Model */
      current_model?: string;
      /** Metadata */
      metadata?: components["schemas"]["OpenaiWebConversationHistoryMeta"] | components["schemas"]["OpenaiApiConversationHistoryMeta"];
    };
    /** BaseConversationSchema */
    BaseConversationSchema: {
      /**
       * Id 
       * @default -1
       */
      id?: number;
      source: components["schemas"]["ChatSourceTypes"];
      /**
       * Conversation Id 
       * Format: uuid
       */
      conversation_id?: string;
      /** Title */
      title?: string;
      /** User Id */
      user_id?: number;
      /**
       * Is Valid 
       * @default true
       */
      is_valid?: boolean;
      /** Current Model */
      current_model?: string;
      /**
       * Create Time 
       * Format: date-time
       */
      create_time?: string;
      /**
       * Update Time 
       * Format: date-time
       */
      update_time?: string;
    };
    /** Body_auth_jwt_login_auth_login_post */
    Body_auth_jwt_login_auth_login_post: {
      /** Grant Type */
      grant_type?: string;
      /** Username */
      username: string;
      /** Password */
      password: string;
      /**
       * Scope 
       * @default
       */
      scope?: string;
      /** Client Id */
      client_id?: string;
      /** Client Secret */
      client_secret?: string;
    };
    /** Body_import_users_system_import_users_post */
    Body_import_users_system_import_users_post: {
      /**
       * File 
       * Format: binary
       */
      file: string;
    };
    /**
     * ChatSourceTypes 
     * @description An enumeration. 
     * @enum {string}
     */
    ChatSourceTypes: "openai_web" | "openai_api";
    /** CommonSetting */
    CommonSetting: {
      /**
       * Sync Conversations On Startup 
       * @default true
       */
      sync_conversations_on_startup?: boolean;
      /**
       * Sync Conversations Regularly 
       * @default false
       */
      sync_conversations_regularly?: boolean;
      /**
       * Print Sql 
       * @default false
       */
      print_sql?: boolean;
      /**
       * Create Initial Admin User 
       * @default true
       */
      create_initial_admin_user?: boolean;
      /**
       * Initial Admin User Username 
       * @default admin
       */
      initial_admin_user_username?: string;
      /**
       * Initial Admin User Password 
       * @default password
       */
      initial_admin_user_password?: string;
    };
    /** CommonStatusSchema */
    CommonStatusSchema: {
      /** Active User In 5M */
      active_user_in_5m?: number;
      /** Active User In 1H */
      active_user_in_1h?: number;
      /** Active User In 1D */
      active_user_in_1d?: number;
      /** Is Chatbot Busy */
      is_chatbot_busy?: boolean;
      /** Chatbot Waiting Count */
      chatbot_waiting_count?: number;
      /** Gpt4 Count In 3 Hours */
      gpt4_count_in_3_hours?: number;
    };
    /** ConfigModel */
    ConfigModel: {
      /**
       * Openai Web 
       * @default {
       *   "enabled": true,
       *   "is_plus_account": true,
       *   "common_timeout": 10,
       *   "ask_timeout": 600,
       *   "enabled_models": [
       *     "gpt_3_5",
       *     "gpt_4",
       *     "gpt_4_browsing",
       *     "gpt_4_plugins"
       *   ],
       *   "model_code_mapping": {
       *     "gpt_3_5": "text-davinci-002-render-sha",
       *     "gpt_3_5_mobile": "text-davinci-002-render-sha-mobile",
       *     "gpt_4": "gpt-4",
       *     "gpt_4_mobile": "gpt-4-mobile",
       *     "gpt_4_browsing": "gpt-4-browsing",
       *     "gpt_4_plugins": "gpt-4-plugins"
       *   }
       * }
       */
      openai_web?: components["schemas"]["OpenaiWebChatGPTSetting"];
      /**
       * Openai Api 
       * @default {
       *   "enabled": true,
       *   "openai_base_url": "https://api.openai.com/v1/",
       *   "connect_timeout": 10,
       *   "read_timeout": 20,
       *   "enabled_models": [
       *     "gpt_3_5",
       *     "gpt_4"
       *   ],
       *   "model_code_mapping": {
       *     "gpt_3_5": "gpt-3.5-turbo",
       *     "gpt_4": "gpt-4"
       *   }
       * }
       */
      openai_api?: components["schemas"]["OpenaiApiSetting"];
      /**
       * Common 
       * @default {
       *   "sync_conversations_on_startup": true,
       *   "sync_conversations_regularly": false,
       *   "print_sql": false,
       *   "create_initial_admin_user": true,
       *   "initial_admin_user_username": "admin",
       *   "initial_admin_user_password": "password"
       * }
       */
      common?: components["schemas"]["CommonSetting"];
      /**
       * Http 
       * @default {
       *   "host": "127.0.0.1",
       *   "port": 8000,
       *   "cors_allow_origins": [
       *     "http://localhost",
       *     "http://127.0.0.1"
       *   ]
       * }
       */
      http?: components["schemas"]["HttpSetting"];
      /**
       * Data 
       * @default {
       *   "data_dir": "./data",
       *   "database_url": "sqlite+aiosqlite:///data/database.db",
       *   "mongodb_url": "mongodb://cws:password@mongo:27017",
       *   "run_migration": false
       * }
       */
      data?: components["schemas"]["DataSetting"];
      /**
       * Auth 
       * @default {
       *   "jwt_secret": "MODIFY_THIS_TO_RANDOM_SECRET",
       *   "jwt_lifetime_seconds": 86400,
       *   "cookie_max_age": 86400,
       *   "cookie_name": "user_auth",
       *   "user_secret": "MODIFY_THIS_TO_RANDOM_SECRET"
       * }
       */
      auth?: components["schemas"]["AuthSetting"];
      /**
       * Stats 
       * @default {
       *   "ask_stats_ttl": 7776000,
       *   "request_stats_ttl": 2592000,
       *   "request_stats_filter_keywords": [
       *     "/status"
       *   ]
       * }
       */
      stats?: components["schemas"]["StatsSetting"];
      /**
       * Log 
       * @default {
       *   "console_log_level": "INFO"
       * }
       */
      log?: components["schemas"]["LogSetting"];
    };
    /** CredentialsModel */
    CredentialsModel: {
      /** Openai Web Access Token */
      openai_web_access_token?: string;
      /** Openai Api Key */
      openai_api_key?: string;
    };
    /** CustomOpenaiApiSettings */
    CustomOpenaiApiSettings: {
      /** Url */
      url?: string;
      /** Key */
      key?: string;
    };
    /** DailyTimeSlot */
    DailyTimeSlot: {
      /**
       * Start Time 
       * Format: time 
       * @description 每天可使用的开始时间
       */
      start_time: string;
      /**
       * End Time 
       * Format: time 
       * @description 每天可使用的结束时间
       */
      end_time: string;
    };
    /** DataSetting */
    DataSetting: {
      /**
       * Data Dir 
       * @default ./data
       */
      data_dir?: string;
      /**
       * Database Url 
       * @default sqlite+aiosqlite:///data/database.db
       */
      database_url?: string;
      /**
       * Mongodb Url 
       * @default mongodb://cws:password@mongo:27017
       */
      mongodb_url?: string;
      /**
       * Run Migration 
       * @default false
       */
      run_migration?: boolean;
    };
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: (components["schemas"]["ValidationError"])[];
    };
    /** HttpSetting */
    HttpSetting: {
      /**
       * Host 
       * @default 127.0.0.1
       */
      host?: string;
      /**
       * Port 
       * @default 8000
       */
      port?: number;
      /**
       * Cors Allow Origins 
       * @default [
       *   "http://localhost",
       *   "http://127.0.0.1"
       * ]
       */
      cors_allow_origins?: (string)[];
    };
    /** LogFilterOptions */
    LogFilterOptions: {
      /**
       * Max Lines 
       * @default 100
       */
      max_lines?: number;
      /** Exclude Keywords */
      exclude_keywords?: (string)[];
    };
    /** LogSetting */
    LogSetting: {
      /**
       * Console Log Level 
       * @default INFO 
       * @enum {string}
       */
      console_log_level?: "INFO" | "DEBUG" | "WARNING";
    };
    /** OpenaiApiAskLogMeta */
    OpenaiApiAskLogMeta: {
      /**
       * Source 
       * @enum {string}
       */
      source: "openai_api";
      model: components["schemas"]["OpenaiApiChatModels"];
    };
    /** OpenaiApiChatMessage */
    OpenaiApiChatMessage: {
      /**
       * Id 
       * Format: uuid
       */
      id: string;
      /**
       * Source 
       * @enum {string}
       */
      source: "openai_api";
      /** Role */
      role: ("system" | "user" | "assistant" | "tool") | string;
      /** Author Name */
      author_name?: "browser" | string;
      /** Model */
      model?: string;
      /**
       * Create Time 
       * Format: date-time
       */
      create_time?: string;
      /**
       * Parent 
       * Format: uuid
       */
      parent?: string;
      /** Children */
      children: (string)[];
      content?: components["schemas"]["OpenaiApiChatMessageTextContent"];
      /** Metadata */
      metadata?: components["schemas"]["OpenaiWebChatMessageMetadata"] | components["schemas"]["OpenaiApiChatMessageMetadata"];
    };
    /** OpenaiApiChatMessageMetadata */
    OpenaiApiChatMessageMetadata: {
      /**
       * Source 
       * @enum {string}
       */
      source: "openai_api";
      usage?: components["schemas"]["OpenaiChatResponseUsage"];
      /** Finish Reason */
      finish_reason?: string;
    };
    /** OpenaiApiChatMessageTextContent */
    OpenaiApiChatMessageTextContent: {
      /**
       * Content Type 
       * @enum {string}
       */
      content_type: "text";
      /** Text */
      text: string;
    };
    /**
     * OpenaiApiChatModels 
     * @description An enumeration. 
     * @enum {string}
     */
    OpenaiApiChatModels: "gpt_3_5" | "gpt_4";
    /**
     * OpenaiApiConversationHistoryDocument 
     * @description Document Mapping class.
     * 
     * Fields:
     * 
     * - `id` - MongoDB document ObjectID "_id" field.
     * Mapped to the PydanticObjectId class
     * 
     * Inherited from:
     * 
     * - Pydantic BaseModel
     * - [UpdateMethods](https://roman-right.github.io/beanie/api/interfaces/#aggregatemethods)
     */
    OpenaiApiConversationHistoryDocument: {
      /**
       * Id 
       * Format: uuid
       */
      _id?: string;
      /**
       * Source 
       * @enum {string}
       */
      source: "openai_api";
      /** Title */
      title: string;
      /**
       * Create Time 
       * Format: date-time
       */
      create_time: string;
      /**
       * Update Time 
       * Format: date-time
       */
      update_time: string;
      /** Mapping */
      mapping: {
        [key: string]: components["schemas"]["OpenaiApiChatMessage"] | undefined;
      };
      /**
       * Current Node 
       * Format: uuid
       */
      current_node?: string;
      /** Current Model */
      current_model?: string;
      /** Metadata */
      metadata?: components["schemas"]["OpenaiWebConversationHistoryMeta"] | components["schemas"]["OpenaiApiConversationHistoryMeta"];
    };
    /** OpenaiApiConversationHistoryMeta */
    OpenaiApiConversationHistoryMeta: {
      /**
       * Source 
       * @enum {string}
       */
      source: "openai_api";
    };
    /** OpenaiApiConversationSchema */
    OpenaiApiConversationSchema: {
      /**
       * Id 
       * @default -1
       */
      id?: number;
      /**
       * Source 
       * @enum {string}
       */
      source: "openai_api";
      /**
       * Conversation Id 
       * Format: uuid
       */
      conversation_id?: string;
      /** Title */
      title?: string;
      /** User Id */
      user_id?: number;
      /**
       * Is Valid 
       * @default true
       */
      is_valid?: boolean;
      /** Current Model */
      current_model?: string;
      /**
       * Create Time 
       * Format: date-time
       */
      create_time?: string;
      /**
       * Update Time 
       * Format: date-time
       */
      update_time?: string;
    };
    /**
     * OpenaiApiPerModelAskCount 
     * @default {
     *   "gpt_3_5": 0,
     *   "gpt_4": 0
     * }
     */
    OpenaiApiPerModelAskCount: {
      [key: string]: number | undefined;
    };
    /** OpenaiApiSetting */
    OpenaiApiSetting: {
      /**
       * Enabled 
       * @default true
       */
      enabled?: boolean;
      /**
       * Openai Base Url 
       * @default https://api.openai.com/v1/
       */
      openai_base_url?: string;
      /** Proxy */
      proxy?: string;
      /**
       * Connect Timeout 
       * @default 10
       */
      connect_timeout?: number;
      /**
       * Read Timeout 
       * @default 20
       */
      read_timeout?: number;
      /**
       * @default [
       *   "gpt_3_5",
       *   "gpt_4"
       * ]
       */
      enabled_models?: (components["schemas"]["OpenaiApiChatModels"])[];
      /**
       * Model Code Mapping 
       * @default {
       *   "gpt_3_5": "gpt-3.5-turbo",
       *   "gpt_4": "gpt-4"
       * }
       */
      model_code_mapping?: {
        [key: string]: string | undefined;
      };
    };
    /** OpenaiApiSourceSettingSchema */
    OpenaiApiSourceSettingSchema: {
      /** Allow To Use */
      allow_to_use: boolean;
      /**
       * Valid Until 
       * Format: date-time
       */
      valid_until?: string;
      /** Max Conv Count */
      max_conv_count: number;
      /** Total Ask Count */
      total_ask_count: number;
      /** Rate Limits */
      rate_limits: (components["schemas"]["TimeWindowRateLimit"])[];
      /** Daily Available Time Slots */
      daily_available_time_slots: (components["schemas"]["DailyTimeSlot"])[];
      available_models: (components["schemas"]["OpenaiApiChatModels"])[];
      per_model_ask_count: components["schemas"]["OpenaiApiPerModelAskCount"];
      /** Allow Custom Openai Api */
      allow_custom_openai_api: boolean;
      custom_openai_api_settings: components["schemas"]["CustomOpenaiApiSettings"];
    };
    /** OpenaiChatPlugin */
    OpenaiChatPlugin: {
      /** Id */
      id?: string;
      /** Namespace */
      namespace?: string;
      manifest?: components["schemas"]["OpenaiChatPluginManifest"];
      /** Categories */
      categories?: (components["schemas"]["OpenaiChatPluginCategory"])[];
      /** Domain */
      domain?: string;
      /** Status */
      status?: "approved" | string;
      /** User Settings */
      user_settings?: components["schemas"]["OpenaiChatPluginUserSettings"] | Record<string, never>;
      /** Oauth Client Id */
      oauth_client_id?: string;
    };
    /** OpenaiChatPluginCategory */
    OpenaiChatPluginCategory: {
      /** Id */
      id?: string;
      /** Title */
      title?: string;
    };
    /** OpenaiChatPluginManifest */
    OpenaiChatPluginManifest: {
      /** Api */
      api?: Record<string, never>;
      /** Auth */
      auth?: Record<string, never>;
      /** Logo Url */
      logo_url?: string;
      /** Contact Email */
      contact_email?: string;
      /** Schema Version */
      schema_version?: string;
      /** Name For Model */
      name_for_model?: string;
      /** Name For Human */
      name_for_human?: string;
      /** Description For Model */
      description_for_model?: string;
      /** Description For Human */
      description_for_human?: string;
      /** Legal Info Url */
      legal_info_url?: string;
    };
    /** OpenaiChatPluginUserSettings */
    OpenaiChatPluginUserSettings: {
      /** Is Authenticated */
      is_authenticated?: boolean;
      /** Is Installed */
      is_installed?: boolean;
    };
    /** OpenaiChatResponseUsage */
    OpenaiChatResponseUsage: {
      /** Prompt Tokens */
      prompt_tokens?: number;
      /** Completion Tokens */
      completion_tokens?: number;
    };
    /** OpenaiWebAskLogMeta */
    OpenaiWebAskLogMeta: {
      /**
       * Source 
       * @enum {string}
       */
      source: "openai_web";
      model: components["schemas"]["OpenaiWebChatModels"];
    };
    /** OpenaiWebChatGPTSetting */
    OpenaiWebChatGPTSetting: {
      /**
       * Enabled 
       * @default true
       */
      enabled?: boolean;
      /**
       * Is Plus Account 
       * @default true
       */
      is_plus_account?: boolean;
      /** Chatgpt Base Url */
      chatgpt_base_url?: string;
      /** Proxy */
      proxy?: string;
      /**
       * Common Timeout 
       * @default 10
       */
      common_timeout?: number;
      /**
       * Ask Timeout 
       * @default 600
       */
      ask_timeout?: number;
      /**
       * @default [
       *   "gpt_3_5",
       *   "gpt_4",
       *   "gpt_4_browsing",
       *   "gpt_4_plugins"
       * ]
       */
      enabled_models?: (components["schemas"]["OpenaiWebChatModels"])[];
      /**
       * Model Code Mapping 
       * @default {
       *   "gpt_3_5": "text-davinci-002-render-sha",
       *   "gpt_3_5_mobile": "text-davinci-002-render-sha-mobile",
       *   "gpt_4": "gpt-4",
       *   "gpt_4_mobile": "gpt-4-mobile",
       *   "gpt_4_browsing": "gpt-4-browsing",
       *   "gpt_4_plugins": "gpt-4-plugins"
       * }
       */
      model_code_mapping?: {
        [key: string]: string | undefined;
      };
    };
    /** OpenaiWebChatMessage */
    OpenaiWebChatMessage: {
      /**
       * Id 
       * Format: uuid
       */
      id: string;
      /**
       * Source 
       * @enum {string}
       */
      source: "openai_web";
      /** Role */
      role: ("system" | "user" | "assistant" | "tool") | string;
      /** Author Name */
      author_name?: "browser" | string;
      /** Model */
      model?: string;
      /**
       * Create Time 
       * Format: date-time
       */
      create_time?: string;
      /**
       * Parent 
       * Format: uuid
       */
      parent?: string;
      /** Children */
      children: (string)[];
      /** Content */
      content?: components["schemas"]["OpenaiWebChatMessageTextContent"] | components["schemas"]["OpenaiWebChatMessageCodeContent"] | components["schemas"]["OpenaiWebChatMessageStderrContent"] | components["schemas"]["OpenaiWebChatMessageTetherBrowsingDisplayContent"] | components["schemas"]["OpenaiWebChatMessageTetherQuoteContent"] | components["schemas"]["OpenaiWebChatMessageSystemErrorContent"];
      /** Metadata */
      metadata?: components["schemas"]["OpenaiWebChatMessageMetadata"] | components["schemas"]["OpenaiApiChatMessageMetadata"];
    };
    /** OpenaiWebChatMessageCodeContent */
    OpenaiWebChatMessageCodeContent: {
      /**
       * Content Type 
       * @enum {string}
       */
      content_type: "code";
      /** Language */
      language?: string;
      /** Text */
      text?: string;
    };
    /** OpenaiWebChatMessageMetadata */
    OpenaiWebChatMessageMetadata: {
      /**
       * Source 
       * @enum {string}
       */
      source: "openai_web";
      /** Finish Details */
      finish_details?: Record<string, never>;
      /** Weight */
      weight?: number;
      /** End Turn */
      end_turn?: boolean;
      /** Message Status */
      message_status?: string;
      /** Recipient */
      recipient?: ("all" | "browser") | string;
      /** Fallback Content */
      fallback_content?: Record<string, never>;
      invoked_plugin?: components["schemas"]["OpenaiWebChatMessageMetadataPlugin"];
      /** Command */
      command?: "search" | string;
      /** Args */
      args?: (string)[];
      /** Status */
      status?: "finished" | string;
      _cite_metadata?: components["schemas"]["OpenaiWebChatMessageMetadataCite"];
      /** Citations */
      citations?: (components["schemas"]["OpenaiWebChatMessageMetadataCitation"])[];
    };
    /** OpenaiWebChatMessageMetadataCitation */
    OpenaiWebChatMessageMetadataCitation: {
      /** Start Ix */
      start_ix?: number;
      /** End Ix */
      end_ix?: number;
      metadata?: components["schemas"]["OpenaiWebChatMessageMetadataCiteData"];
    };
    /** OpenaiWebChatMessageMetadataCite */
    OpenaiWebChatMessageMetadataCite: {
      /** Citation Format */
      citation_format?: Record<string, never>;
      /** Metadata List */
      metadata_list?: (components["schemas"]["OpenaiWebChatMessageMetadataCiteData"])[];
    };
    /** OpenaiWebChatMessageMetadataCiteData */
    OpenaiWebChatMessageMetadataCiteData: {
      /** Title */
      title?: string;
      /** Url */
      url?: string;
      /** Text */
      text?: string;
    };
    /** OpenaiWebChatMessageMetadataPlugin */
    OpenaiWebChatMessageMetadataPlugin: {
      /** Http Response Status */
      http_response_status?: number;
      /** Namespace */
      namespace?: string;
      /** Plugin Id */
      plugin_id?: string;
      /** Type */
      type?: string;
    };
    /** OpenaiWebChatMessageStderrContent */
    OpenaiWebChatMessageStderrContent: {
      /**
       * Content Type 
       * @enum {string}
       */
      content_type: "stderr";
      /** Text */
      text?: string;
    };
    /** OpenaiWebChatMessageSystemErrorContent */
    OpenaiWebChatMessageSystemErrorContent: {
      /**
       * Content Type 
       * @enum {string}
       */
      content_type: "system_error";
      /** Name */
      name?: "tool_error" | string;
      /** Text */
      text?: string;
    };
    /** OpenaiWebChatMessageTetherBrowsingDisplayContent */
    OpenaiWebChatMessageTetherBrowsingDisplayContent: {
      /**
       * Content Type 
       * @enum {string}
       */
      content_type: "tether_browsing_display";
      /** Result */
      result?: string;
    };
    /** OpenaiWebChatMessageTetherQuoteContent */
    OpenaiWebChatMessageTetherQuoteContent: {
      /**
       * Content Type 
       * @enum {string}
       */
      content_type: "tether_quote";
      /** Url */
      url?: string;
      /** Domain */
      domain?: string;
      /** Text */
      text?: string;
      /** Title */
      title?: string;
    };
    /** OpenaiWebChatMessageTextContent */
    OpenaiWebChatMessageTextContent: {
      /**
       * Content Type 
       * @enum {string}
       */
      content_type: "text";
      /** Parts */
      parts?: (string)[];
    };
    /**
     * OpenaiWebChatModels 
     * @description An enumeration. 
     * @enum {string}
     */
    OpenaiWebChatModels: "gpt_3_5" | "gpt_3_5_mobile" | "gpt_4" | "gpt_4_mobile" | "gpt_4_browsing" | "gpt_4_plugins";
    /**
     * OpenaiWebChatStatus 
     * @description An enumeration. 
     * @enum {string}
     */
    OpenaiWebChatStatus: "asking" | "queueing" | "idling";
    /**
     * OpenaiWebConversationHistoryDocument 
     * @description Document Mapping class.
     * 
     * Fields:
     * 
     * - `id` - MongoDB document ObjectID "_id" field.
     * Mapped to the PydanticObjectId class
     * 
     * Inherited from:
     * 
     * - Pydantic BaseModel
     * - [UpdateMethods](https://roman-right.github.io/beanie/api/interfaces/#aggregatemethods)
     */
    OpenaiWebConversationHistoryDocument: {
      /**
       * Id 
       * Format: uuid
       */
      _id?: string;
      /**
       * Source 
       * @enum {string}
       */
      source: "openai_web";
      /** Title */
      title: string;
      /**
       * Create Time 
       * Format: date-time
       */
      create_time: string;
      /**
       * Update Time 
       * Format: date-time
       */
      update_time: string;
      /** Mapping */
      mapping: {
        [key: string]: components["schemas"]["OpenaiWebChatMessage"] | undefined;
      };
      /**
       * Current Node 
       * Format: uuid
       */
      current_node?: string;
      /** Current Model */
      current_model?: string;
      metadata?: components["schemas"]["OpenaiWebConversationHistoryMeta"];
    };
    /** OpenaiWebConversationHistoryMeta */
    OpenaiWebConversationHistoryMeta: {
      /**
       * Source 
       * @enum {string}
       */
      source: "openai_web";
      /** Moderation Results */
      moderation_results?: (Record<string, never>)[];
      /** Plugin Ids */
      plugin_ids?: (string)[];
    };
    /** OpenaiWebConversationSchema */
    OpenaiWebConversationSchema: {
      /**
       * Id 
       * @default -1
       */
      id?: number;
      /**
       * Source 
       * @enum {string}
       */
      source: "openai_web";
      /**
       * Conversation Id 
       * Format: uuid
       */
      conversation_id?: string;
      /** Title */
      title?: string;
      /** User Id */
      user_id?: number;
      /**
       * Is Valid 
       * @default true
       */
      is_valid?: boolean;
      /** Current Model */
      current_model?: string;
      /**
       * Create Time 
       * Format: date-time
       */
      create_time?: string;
      /**
       * Update Time 
       * Format: date-time
       */
      update_time?: string;
    };
    /**
     * OpenaiWebPerModelAskCount 
     * @default {
     *   "gpt_3_5": 0,
     *   "gpt_3_5_mobile": 0,
     *   "gpt_4": 0,
     *   "gpt_4_mobile": 0,
     *   "gpt_4_browsing": 0,
     *   "gpt_4_plugins": 0
     * }
     */
    OpenaiWebPerModelAskCount: {
      [key: string]: number | undefined;
    };
    /** OpenaiWebSourceSettingSchema */
    OpenaiWebSourceSettingSchema: {
      /** Allow To Use */
      allow_to_use: boolean;
      /**
       * Valid Until 
       * Format: date-time
       */
      valid_until?: string;
      /** Max Conv Count */
      max_conv_count: number;
      /** Total Ask Count */
      total_ask_count: number;
      /** Rate Limits */
      rate_limits: (components["schemas"]["TimeWindowRateLimit"])[];
      /** Daily Available Time Slots */
      daily_available_time_slots: (components["schemas"]["DailyTimeSlot"])[];
      available_models: (components["schemas"]["OpenaiWebChatModels"])[];
      per_model_ask_count: components["schemas"]["OpenaiWebPerModelAskCount"];
    };
    /** RequestLogAggregation */
    RequestLogAggregation: {
      _id: components["schemas"]["RequestLogAggregationID"];
      /** Count */
      count: number;
      /** User Ids */
      user_ids?: (number)[];
      /** Avg Elapsed Ms */
      avg_elapsed_ms?: number;
    };
    /** RequestLogAggregationID */
    RequestLogAggregationID: {
      /**
       * Start Time 
       * Format: date-time
       */
      start_time?: string;
      /** Route Path */
      route_path?: string;
      /** Method */
      method?: string;
    };
    /** StatsSetting */
    StatsSetting: {
      /**
       * Ask Stats Ttl 
       * @default 7776000
       */
      ask_stats_ttl?: number;
      /**
       * Request Stats Ttl 
       * @default 2592000
       */
      request_stats_ttl?: number;
      /**
       * Request Stats Filter Keywords 
       * @default [
       *   "/status"
       * ]
       */
      request_stats_filter_keywords?: (string)[];
    };
    /** SystemInfo */
    SystemInfo: {
      /** Startup Time */
      startup_time: number;
      /** Total User Count */
      total_user_count: number;
      /** Total Conversation Count */
      total_conversation_count: number;
      /** Valid Conversation Count */
      valid_conversation_count: number;
    };
    /** TimeWindowRateLimit */
    TimeWindowRateLimit: {
      /**
       * Window Seconds 
       * @description 时间窗口大小，单位为秒
       */
      window_seconds: number;
      /**
       * Max Requests 
       * @description 在给定时间窗口内最多的请求次数
       */
      max_requests: number;
    };
    /** UserCreate */
    UserCreate: {
      /**
       * Email 
       * Format: email
       */
      email: string;
      /** Password */
      password: string;
      /**
       * Is Active 
       * @default true
       */
      is_active?: boolean;
      /**
       * Is Superuser 
       * @default false
       */
      is_superuser?: boolean;
      /**
       * Is Verified 
       * @default false
       */
      is_verified?: boolean;
      /** Username */
      username: string;
      /** Nickname */
      nickname: string;
      /** Avatar */
      avatar?: string;
      /** Remark */
      remark?: string;
    };
    /**
     * UserRead 
     * @description Base User model.
     */
    UserRead: {
      /** Id */
      id: number;
      /**
       * Email 
       * Format: email
       */
      email: string;
      /** Is Active */
      is_active: boolean;
      /** Is Superuser */
      is_superuser: boolean;
      /** Is Verified */
      is_verified: boolean;
      /** Username */
      username: string;
      /** Nickname */
      nickname: string;
      /**
       * Last Active Time 
       * Format: date-time
       */
      last_active_time?: string;
      /**
       * Create Time 
       * Format: date-time
       */
      create_time: string;
      /** Avatar */
      avatar?: string;
      setting: components["schemas"]["UserSettingSchema"];
    };
    /**
     * UserReadAdmin 
     * @description Base User model.
     */
    UserReadAdmin: {
      /** Id */
      id: number;
      /**
       * Email 
       * Format: email
       */
      email: string;
      /** Is Active */
      is_active: boolean;
      /** Is Superuser */
      is_superuser: boolean;
      /** Is Verified */
      is_verified: boolean;
      /** Username */
      username: string;
      /** Nickname */
      nickname: string;
      /**
       * Last Active Time 
       * Format: date-time
       */
      last_active_time?: string;
      /**
       * Create Time 
       * Format: date-time
       */
      create_time: string;
      /** Avatar */
      avatar?: string;
      setting: components["schemas"]["UserSettingSchema"];
      /** Remark */
      remark?: string;
    };
    /** UserSettingSchema */
    UserSettingSchema: {
      /** Id */
      id?: number;
      /** User Id */
      user_id?: number;
      /** Credits */
      credits: number;
      openai_web_chat_status: components["schemas"]["OpenaiWebChatStatus"];
      openai_web: components["schemas"]["OpenaiWebSourceSettingSchema"];
      openai_api: components["schemas"]["OpenaiApiSourceSettingSchema"];
    };
    /** UserUpdate */
    UserUpdate: {
      /** Password */
      password?: string;
      /** Email */
      email?: string;
      /** Is Active */
      is_active?: boolean;
      /** Is Superuser */
      is_superuser?: boolean;
      /** Is Verified */
      is_verified?: boolean;
      /** Nickname */
      nickname?: string;
      /** Avatar */
      avatar?: string;
    };
    /** UserUpdateAdmin */
    UserUpdateAdmin: {
      /** Password */
      password?: string;
      /** Email */
      email?: string;
      /** Is Active */
      is_active?: boolean;
      /** Is Superuser */
      is_superuser?: boolean;
      /** Is Verified */
      is_verified?: boolean;
      /** Nickname */
      nickname?: string;
      /** Avatar */
      avatar?: string;
      /** Username */
      username?: string;
      /** Remark */
      remark?: string;
    };
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {

  auth_jwt_login_auth_login_post: {
    /** Auth:Jwt.Login */
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": components["schemas"]["Body_auth_jwt_login_auth_login_post"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": string;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  auth_jwt_logout_auth_logout_post: {
    /** Auth:Jwt.Logout */
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  register_auth_register_post: {
    /**
     * Register 
     * @description 注册时不能指定setting，使用默认setting
     */
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": string;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_all_users_user_get: {
    /** Get All Users */
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  get_me_user_me_get: {
    /** Get Me */
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  update_me_user_me_patch: {
    /** Update Me */
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": string;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  admin_get_user_user__user_id__get: {
    /** Admin Get User */
    parameters: {
      path: {
        user_id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": string;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  admin_delete_user_user__user_id__delete: {
    /** Admin Delete User */
    parameters: {
      path: {
        user_id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": string;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  admin_update_user_user__user_id__patch: {
    /** Admin Update User */
    parameters: {
      path: {
        user_id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserUpdateAdmin"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": string;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  admin_update_user_setting_user__user_id__setting_patch: {
    /** Admin Update User Setting */
    parameters: {
      path: {
        user_id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserSettingSchema"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": string;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_my_conversations_conv_get: {
    /**
     * Get My Conversations 
     * @description 返回自己的有效会话
     */
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  delete_all_conversation_conv_delete: {
    /** Delete All Conversation */
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  get_all_conversations_conv_all_get: {
    /** Get All Conversations */
    parameters?: {
      query?: {
        valid_only?: boolean;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": string;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_conversation_history_conv__conversation_id__get: {
    /** Get Conversation History */
    parameters: {
      path: {
        conversation_id: string | string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": string;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  delete_conversation_conv__conversation_id__delete: {
    /**
     * Delete Conversation 
     * @description 软删除：标记为 invalid 并且从 chatgpt 账号中删除会话，但不会删除 mongodb 中的历史记录
     */
    parameters: {
      path: {
        conversation_id: string | string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": string;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  update_conversation_title_conv__conversation_id__patch: {
    /** Update Conversation Title */
    parameters: {
      query: {
        title: string;
      };
      path: {
        conversation_id: string | string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": string;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_conversation_history_from_cache_conv__conversation_id__cache_get: {
    /** Get Conversation History From Cache */
    parameters: {
      path: {
        conversation_id: Record<string, never>;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": string;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  vanish_conversation_conv__conversation_id__vanish_delete: {
    /**
     * Vanish Conversation 
     * @description 硬删除：删除数据库和账号中的对话和历史记录
     */
    parameters: {
      path: {
        conversation_id: string | string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": string;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  assign_conversation_conv__conversation_id__assign__username__patch: {
    /** Assign Conversation */
    parameters: {
      path: {
        username: string;
        conversation_id: string | string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": string;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  generate_conversation_title_conv__conversation_id__gen_title_patch: {
    /** Generate Conversation Title */
    parameters: {
      query: {
        message_id: string;
      };
      path: {
        conversation_id: string | string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": string;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_all_openai_web_chat_plugins_chat_openai_plugins_all_get: {
    /** Get All Openai Web Chat Plugins */
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  get_installed_openai_web_chat_plugins_chat_openai_plugins_installed_get: {
    /** Get Installed Openai Web Chat Plugins */
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  get_openai_web_plugin_chat_openai_plugin__plugin_id__get: {
    /** Get Openai Web Plugin */
    parameters: {
      path: {
        plugin_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": string;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  update_chat_plugin_user_settings_chat_openai_plugin__plugin_id__user_settings_patch: {
    /** Update Chat Plugin User Settings */
    parameters: {
      path: {
        plugin_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["OpenaiChatPluginUserSettings"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": string;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  _predict_schema_types_chat___schema_types_get: {
    /**
     * Predict Schema Types 
     * @description 只用来让 openapi 自动生成 schema，并不实际调用
     */
    requestBody: {
      content: {
        "application/json": components["schemas"]["AskRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": string;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_system_info_system_info_get: {
    /** Get System Info */
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  get_request_statistics_system_stats_request_get: {
    /** Get Request Statistics */
    parameters?: {
      query?: {
        granularity?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": string;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_ask_statistics_system_stats_ask_get: {
    /** Get Ask Statistics */
    parameters?: {
      query?: {
        granularity?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": string;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_server_logs_system_logs_server_post: {
    /** Get Server Logs */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["LogFilterOptions"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": string;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_config_system_config_get: {
    /** Get Config */
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  update_config_system_config_put: {
    /** Update Config */
    requestBody: {
      content: {
        "application/json": components["schemas"]["ConfigModel"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": string;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_credentials_system_credentials_get: {
    /** Get Credentials */
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  update_credentials_system_credentials_put: {
    /** Update Credentials */
    requestBody: {
      content: {
        "application/json": components["schemas"]["CredentialsModel"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": string;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  import_users_system_import_users_post: {
    /**
     * Import Users 
     * @description 解析csv文件，导入用户
     * csv字段：
     */
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["Body_import_users_system_import_users_post"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": string;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_server_status_status_common_get: {
    /**
     * Get Server Status 
     * @description 普通用户获取服务器状态
     */
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
}
